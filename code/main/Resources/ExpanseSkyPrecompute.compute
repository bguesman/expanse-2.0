#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel T main=T
#pragma kernel LP main=LP
#pragma kernel SS main=SS
#pragma kernel SSAerialPerspective main=SSAerialPerspective
#pragma kernel GI main=GI
#pragma kernel MS main=MS
#pragma kernel MSAcc main=MSAcc

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "../../common/shaders/ExpanseSkyCommon.hlsl"
#include "../../sky/ExpanseSkyMapping.hlsl"

/* RW Textures. */
/* Transmittance. */
RW_TEXTURE2D(float3, _T_RW);

/* Light Pollution. */
RW_TEXTURE2D_ARRAY(float3, _LP_RW);

/* Single scattering, with and without shadows. */
RW_TEXTURE2D_ARRAY(float3, _SS_RW);
RW_TEXTURE2D_ARRAY(float3, _SSNoShadow_RW);
RW_TEXTURE2D_ARRAY(float3, _SSAerialPerspectiveLOD0_RW);
RW_TEXTURE2D_ARRAY(float3, _SSAerialPerspectiveLOD1_RW);

/* Multiple scattering. */
RW_TEXTURE2D(float3, _MS_RW);

/* Multiple scattering accumulation. */
RW_TEXTURE2D_ARRAY(float3, _MSAcc_RW);

/* Ground Irradiance. */
RW_TEXTURE2D_ARRAY(float3, _GI_RW);

[numthreads(8,8,1)]
void T(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle and a
   * height. */
  float u_r = (id.x + 0.5f) / float(_resT.x);
  float u_mu = (id.y + 0.5f) / float(_resT.y);

  float2 r_mu = unmapSky2DCoord(u_r, u_mu, _atmosphereRadius, _planetRadius);

  float r = r_mu.x;
  float mu = r_mu.y;

  float3 O = float3(0, r, 0);
  float3 d = float3(safeSqrt(1 - mu * mu), mu, 0);

  /* Trace a ray to see what we hit. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  float3 endPoint = O + d * intersection.endT;

  /* Compute optical depth for all enabled atmosphere layers. */
  float3 power = float3(0, 0, 0);
  for (int i = 0; i < _numActiveLayers; i++) {
    float opticalDepth = computeOpticalDepth(_layerDensityDistribution[i],
      O, endPoint, _layerHeight[i], _layerThickness[i], _layerDensity[i],
      _layerAttenuationBias[i], _layerAttenuationDistance[i],
      _layerUseDensityAttenuation[i], _numTSamples);
    /* Absorption is about 1.1x scattering for aerosols. */
    power += opticalDepth * _layerCoefficientsA[i].xyz;
  }

  /* Compute transmittance from optical depth. */
  _T_RW[id.xy] = -power;
}

[numthreads(8,8,1)]
void LP(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle and a
   * height. */
  float u_r = (id.x + 0.5f) / float(_resLP.x);
  float u_mu = (id.y + 0.5f) / float(_resLP.y);

  float2 r_mu = unmapSky2DCoord(u_r, u_mu, _atmosphereRadius, _planetRadius);

  float r = r_mu.x;
  float mu = r_mu.y;

  float3 O = float3(0, r, 0);
  float3 d = float3(safeSqrt(1 - mu * mu), mu, 0);

  /* Trace a ray to see what we hit. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  float3 endPoint = O + d * intersection.endT;
  float t_hit = intersection.endT;

  float2 oToSample = mapSky2DCoord(length(O), mu, _atmosphereRadius,
    _planetRadius, t_hit, intersection.groundHit, _resT.y);

  float3 lightPollution[MAX_LAYERS];
  float scaledDensity[MAX_LAYERS];
  for (int i = 0; i < MAX_LAYERS; i++) {
    lightPollution[i] = float3(0, 0, 0);
    scaledDensity[i] = 0;
  }

  for (int i = 0; i < _numLPSamples; i++) {
    float sampleT = 0.0;
    float ds = 0.0;
    if (_useImportanceSampling) {
      float2 t_ds = generateCubicSampleFromIndex(i, _numLPSamples);
      sampleT = t_hit * t_ds.x;
      ds = t_ds.y;
    } else {
      /* Distribute linearly. */
      float2 t_ds = generateLinearSampleFromIndex(i, _numLPSamples);
      sampleT = t_hit * t_ds.x;
      ds = t_ds.y;
    }

    float3 samplePoint = O + d * sampleT;
    float3 normalizedSamplePoint = normalize(samplePoint);

    /* Compute the scaled density for each layer.  */
    for (int j = 0; j < _numActiveLayers; j++) {
      scaledDensity[j] = ds * computeDensity(_layerDensityDistribution[j],
        samplePoint, _layerHeight[j], _layerThickness[j], _layerDensity[j],
        _layerUseDensityAttenuation[j], sampleT, _layerAttenuationBias[j],
        _layerAttenuationDistance[j]);
    }

    /* Compute transmittance from O to sample point. */
    float3 T_oToSample = SAMPLE_TEXTURE2D_LOD(_T, s_linear_clamp_sampler,
      oToSample, 0);

    /* Our transmittance value for O to the sample point is too large---we
     * need to divide out the transmittance from the sample point to the
     * atmosphere, or ground, depending on what we hit. */
    float2 sampleOut = mapSky2DCoord(length(samplePoint),
      clampCosine(dot(normalizedSamplePoint, d)), _atmosphereRadius,
      _planetRadius, t_hit - sampleT, intersection.groundHit, _resT.y);
    float3 T_sampleOut = SAMPLE_TEXTURE2D_LOD(_T, s_linear_clamp_sampler,
      sampleOut, 0).xyz;
    T_oToSample -= T_sampleOut;

    /* Compute the light transmittance to the ground. */
    float2 sampleToGround = mapSky2DCoord(length(samplePoint), -1.0,
      _atmosphereRadius, _planetRadius, length(samplePoint) - _planetRadius,
      true, _resT.y);
    float3 T_sampleToGround = SAMPLE_TEXTURE2D_LOD(_T, s_linear_clamp_sampler,
      sampleToGround, 0).xyz;

    float3 T = exp(T_oToSample + T_sampleToGround);

    for (int j = 0; j < _numActiveLayers; j++) {
      lightPollution[j] += scaledDensity[j] * T;
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _LP_RW[uint3(id.xy, (uint) i)] = lightPollution[i];
  }
}

[numthreads(8,32,1)]
void SS(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle, a
   * height, and the sun zenith and azimuth angles. */

  /* Viewing angle. */
  float u_mu = (id.x + 0.5f) / float(_resSS.y);

  float3 u_r_u_mu_l_u_nu = deepTexIndexToUV(id.y, _resSS.x, _resSS.z, _resSS.w);
  /* Height. */
  float u_r = u_r_u_mu_l_u_nu.x;
  /* Sun zenith angle. */
  float u_mu_l = u_r_u_mu_l_u_nu.y;
  /* Sun azimuth angle. */
  float u_nu = u_r_u_mu_l_u_nu.z;

  float4 ssCoord = unmapSky4DCoord(u_r, u_mu, u_mu_l, u_nu, _atmosphereRadius,
    _planetRadius);

  float r = ssCoord.x;
  float mu = ssCoord.y;
  float mu_l = ssCoord.z;
  float nu = ssCoord.w;

  float3 O = float3(0, r, 0);
  float3 d = float3(safeSqrt(1 - mu * mu), mu, 0);
  float3 L = float3(nu*safeSqrt(1 - mu_l*mu_l), mu_l,
    safeSqrt(1 - nu * nu)*safeSqrt(1 - mu_l*mu_l));

  /* Trace a ray to see what we hit. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);

  float3 endPoint = O + d * intersection.endT;
  float t_hit = intersection.endT;

  float2 oToSample = mapSky2DCoord(length(O), mu, _atmosphereRadius,
    _planetRadius, t_hit, intersection.groundHit, _resT.y);

  float3 inScattering[MAX_LAYERS];
  float3 inScatteringNoShadows[MAX_LAYERS];
  float scaledDensity[MAX_LAYERS];
  for (int j = 0; j < _numActiveLayers; j++) {
    inScattering[j] = float3(0, 0, 0);
    inScatteringNoShadows[j] = float3(0, 0, 0);
    scaledDensity[j] = 0;
  }

  for (int i = 0; i < _numSSSamples; i++) {
    float sampleT = 0.0;
    float ds = 0.0;
    if (_useImportanceSampling) {
      float2 t_ds = generateCubicSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    } else {
      /* Distribute linearly. */
      float2 t_ds = generateLinearSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    }

    float3 samplePoint = O + d * sampleT;
    float3 normalizedSamplePoint = normalize(samplePoint);

    /* Compute the scaled density of the layer at the sample point. */
    for (int j = 0; j < _numActiveLayers; j++) {
      scaledDensity[j] = ds * computeDensity(_layerDensityDistribution[j],
        samplePoint, _layerHeight[j], _layerThickness[j], _layerDensity[j],
        _layerUseDensityAttenuation[j], sampleT, _layerAttenuationBias[j],
        _layerAttenuationDistance[j]);
    }

    /* Compute transmittance from O to sample point, and then from sample
     * point through to the light hit. */
    float3 T_oToSample = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, oToSample, 0).rgb;

    /* Our transmittance value for O to the sample point is too large---we
     * need to divide out the transmittance from the sample point to the
     * atmosphere, or ground, depending on what we hit. */
    float2 sampleOut = mapSky2DCoord(length(samplePoint),
      clampCosine(dot(normalizedSamplePoint, d)), _atmosphereRadius,
      _planetRadius, t_hit - sampleT, intersection.groundHit, _resT.y);
    float3 T_sampleOut = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, sampleOut, 0).rgb;
    T_oToSample -= T_sampleOut;

    for (int j = 0; j < _numActiveLayers; j++) {
      inScatteringNoShadows[j] += scaledDensity[j] * saturate(exp(T_oToSample));
    }

    /* Trace a ray from the sample point to the light to check visibility. */
    SkyIntersectionData lightIntersection = traceSkyVolume(samplePoint,
      L, _planetRadius, _atmosphereRadius);

    if (!lightIntersection.groundHit) {
      float3 lightEndPoint = samplePoint + L * lightIntersection.endT;
      float t_light_hit = lightIntersection.endT;

      /* Compute the light transmittance to the sample point. */
      float2 sampleToL = mapSky2DCoord(length(samplePoint),
        clampCosine(dot(normalizedSamplePoint, L)), _atmosphereRadius,
        _planetRadius, t_light_hit, lightIntersection.groundHit, _resT.y);
      /* Compute transmittance through sample to light hit point. */
      float3 T_sampleToL = SAMPLE_TEXTURE2D_LOD(_T,
        s_linear_clamp_sampler, sampleToL, 0).rgb;

      float3 T = saturate(exp(T_oToSample + T_sampleToL));
      for (int j = 0; j < _numActiveLayers; j++) {
        inScattering[j] += scaledDensity[j] * T;
      }
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _SS_RW[uint3(id.xy, (uint) i)] = inScattering[i];
    _SSNoShadow_RW[uint3(id.xy, (uint) i)] = inScatteringNoShadows[i];
  }
}

// TODO: this fundamentally doesn't work, for the same reason density
// attenuation doesn't work. You end up sampling twice from this table
// expecting the boundary to be the same in both cases, but it's not.
// It is ALWAYS 300m (if that's the set distance) away from the sample
// point.
[numthreads(8,32,1)]
void SSAerialPerspective(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle, a
   * height, and the sun zenith and azimuth angles. */
  /* Viewing angle. */
  float u_mu = (id.x + 0.5f) / float(_resSS.y);

  float3 u_r_u_mu_l_u_nu = deepTexIndexToUV(id.y, _resSS.x, _resSS.z, _resSS.w);
  /* Height. */
  float u_r = u_r_u_mu_l_u_nu.x;
  /* Sun zenith angle. */
  float u_mu_l = u_r_u_mu_l_u_nu.y;
  /* Sun azimuth angle. */
  float u_nu = u_r_u_mu_l_u_nu.z;

  float4 ssCoord = unmapSky4DCoord(u_r, u_mu, u_mu_l, u_nu, _atmosphereRadius,
    _planetRadius);

  float r = ssCoord.x;
  float mu = ssCoord.y;
  float mu_l = ssCoord.z;
  float nu = ssCoord.w;

  float3 O = float3(0, r, 0);
  float3 d = float3(safeSqrt(1 - mu * mu), mu, 0);
  float3 L = float3(nu*safeSqrt(1 - mu_l*mu_l), mu_l,
    safeSqrt(1 - nu * nu)*safeSqrt(1 - mu_l*mu_l));

  /* Trace a ray to see what we hit. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);

  /*********************************************/
  /******************* LOD 0 *******************/
  /*********************************************/

  float3 endPoint = O + d * min(_aerialPerspectiveTableDistanceLOD0, intersection.endT);
  float t_hit = min(_aerialPerspectiveTableDistanceLOD0, intersection.endT);

  float2 oToSample = mapSky2DCoord(length(O), mu, _atmosphereRadius,
    _planetRadius, intersection.endT, intersection.groundHit, _resT.y);

  float3 inScattering[MAX_LAYERS];
  float scaledDensity[MAX_LAYERS];
  for (int j = 0; j < _numActiveLayers; j++) {
    inScattering[j] = float3(0, 0, 0);
    scaledDensity[j] = 0;
  }

  for (int i = 0; i < _numSSSamples; i++) {
    float sampleT = 0.0;
    float ds = 0.0;
    if (_useImportanceSampling) {
      float2 t_ds = generateCubicSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    } else {
      /* Distribute linearly. */
      float2 t_ds = generateLinearSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    }

    float3 samplePoint = O + d * sampleT;
    float3 normalizedSamplePoint = normalize(samplePoint);

    /* Compute the scaled density of the layer at the sample point. */
    for (int j = 0; j < _numActiveLayers; j++) {
      scaledDensity[j] = ds * computeDensity(_layerDensityDistribution[j],
        samplePoint, _layerHeight[j], _layerThickness[j], _layerDensity[j],
        _layerUseDensityAttenuation[j], sampleT, _layerAttenuationBias[j],
        _layerAttenuationDistance[j]);
    }

    /* Compute transmittance from O to sample point, and then from sample
     * point through to the light hit. */
    float3 T_oToSample = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, oToSample, 0).rgb;

    /* Our transmittance value for O to the sample point is too large---we
     * need to divide out the transmittance from the sample point to the
     * atmosphere, or ground, depending on what we hit. */
    float2 sampleOut = mapSky2DCoord(length(samplePoint),
      clampCosine(dot(normalizedSamplePoint, d)), _atmosphereRadius,
      _planetRadius, intersection.endT - sampleT, intersection.groundHit, _resT.y);
    float3 T_sampleOut = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, sampleOut, 0).rgb;
    T_oToSample -= T_sampleOut;

    /* Trace a ray from the sample point to the light to check visibility. */
    SkyIntersectionData lightIntersection = traceSkyVolume(samplePoint,
      L, _planetRadius, _atmosphereRadius);

    if (!lightIntersection.groundHit) {
      float3 lightEndPoint = samplePoint + L * lightIntersection.endT;
      float t_light_hit = lightIntersection.endT;

      /* Compute the light transmittance to the sample point. */
      float2 sampleToL = mapSky2DCoord(length(samplePoint),
        clampCosine(dot(normalizedSamplePoint, L)), _atmosphereRadius,
        _planetRadius, t_light_hit, lightIntersection.groundHit, _resT.y);
      /* Compute transmittance through sample to light hit point. */
      float3 T_sampleToL = SAMPLE_TEXTURE2D_LOD(_T,
        s_linear_clamp_sampler, sampleToL, 0).rgb;

      float3 T = saturate(exp(T_oToSample + T_sampleToL));
      for (int j = 0; j < _numActiveLayers; j++) {
        inScattering[j] += scaledDensity[j] * T;
      }
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _SSAerialPerspectiveLOD0_RW[uint3(id.xy, (uint) i)] = inScattering[i];
  }

  /*********************************************/
  /******************* LOD 1 *******************/
  /*********************************************/

  endPoint = O + d * min(_aerialPerspectiveTableDistanceLOD1, intersection.endT);
  t_hit = min(_aerialPerspectiveTableDistanceLOD1, intersection.endT);

  oToSample = mapSky2DCoord(length(O), mu, _atmosphereRadius, _planetRadius,
    intersection.endT, intersection.groundHit, _resT.y);

  for (int j = 0; j < _numActiveLayers; j++) {
    inScattering[j] = float3(0, 0, 0);
    scaledDensity[j] = 0;
  }

  for (int i = 0; i < _numSSSamples; i++) {
    float sampleT = 0.0;
    float ds = 0.0;
    if (_useImportanceSampling) {
      float2 t_ds = generateCubicSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    } else {
      /* Distribute linearly. */
      float2 t_ds = generateLinearSampleFromIndex(i, _numSSSamples);
      sampleT = t_ds.x * t_hit;
      ds = t_ds.y;
    }

    float3 samplePoint = O + d * sampleT;
    float3 normalizedSamplePoint = normalize(samplePoint);

    /* Compute the scaled density of the layer at the sample point. */
    for (int j = 0; j < _numActiveLayers; j++) {
      scaledDensity[j] = ds * computeDensity(_layerDensityDistribution[j],
        samplePoint, _layerHeight[j], _layerThickness[j], _layerDensity[j],
        _layerUseDensityAttenuation[j], sampleT, _layerAttenuationBias[j],
        _layerAttenuationDistance[j]);
    }

    /* Compute transmittance from O to sample point, and then from sample
     * point through to the light hit. */
    float3 T_oToSample = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, oToSample, 0).rgb;

    /* Our transmittance value for O to the sample point is too large---we
     * need to divide out the transmittance from the sample point to the
     * atmosphere, or ground, depending on what we hit. */
    float2 sampleOut = mapSky2DCoord(length(samplePoint),
      clampCosine(dot(normalizedSamplePoint, d)), _atmosphereRadius,
      _planetRadius, intersection.endT - sampleT, intersection.groundHit, _resT.y);
    float3 T_sampleOut = SAMPLE_TEXTURE2D_LOD(_T,
      s_linear_clamp_sampler, sampleOut, 0).rgb;
    T_oToSample -= T_sampleOut;

    /* Trace a ray from the sample point to the light to check visibility. */
    SkyIntersectionData lightIntersection = traceSkyVolume(samplePoint,
      L, _planetRadius, _atmosphereRadius);

    if (!lightIntersection.groundHit) {
      float3 lightEndPoint = samplePoint + L * lightIntersection.endT;
      float t_light_hit = lightIntersection.endT;

      /* Compute the light transmittance to the sample point. */
      float2 sampleToL = mapSky2DCoord(length(samplePoint),
        clampCosine(dot(normalizedSamplePoint, L)), _atmosphereRadius,
        _planetRadius, t_light_hit, lightIntersection.groundHit, _resT.y);
      /* Compute transmittance through sample to light hit point. */
      float3 T_sampleToL = SAMPLE_TEXTURE2D_LOD(_T,
        s_linear_clamp_sampler, sampleToL, 0).rgb;

      float3 T = saturate(exp(T_oToSample + T_sampleToL));
      for (int j = 0; j < _numActiveLayers; j++) {
        inScattering[j] += scaledDensity[j] * T;
      }
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _SSAerialPerspectiveLOD1_RW[uint3(id.xy, (uint) i)] = inScattering[i];
  }
}

[numthreads(4,1,1)]
void GI(uint3 id : SV_DispatchThreadID) {
  float u_mu_l = (id.x + 0.5f) / float(_resGI);

  float2 r_mu_l = unmapSky1DCoord(u_mu_l, _planetRadius);
  float r = r_mu_l.x;
  float mu_l = r_mu_l.y;

  float3 O = float3(0, r, 0);
  float3 O_normalized = float3(0, 1, 0);
  float3 L = float3(safeSqrt(1 - mu_l * mu_l), mu_l, 0);

  /* Precompute outside of loop. */
  float3 proj_L = normalize(L - O_normalized * mu_l);

  float3 gi[MAX_LAYERS];
  for (int j = 0; j < _numActiveLayers; j++) {
    gi[j] = float3(0, 0, 0);
  }

  for (int i = 0; i < _numGISamples; i++) {
    /* Generate fibonacci hemisphere dir based on i. */
    float3 d = fibonacciHemisphere(i, _numGISamples);

    float mu = dot(d, O_normalized);
    float3 proj_d = normalize(d - O_normalized * dot(O_normalized, d));
    float nu = clampCosine(dot(proj_L, proj_d));

    /* Check to see if we hit the sky. */
    SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
      _atmosphereRadius);
    if (!intersection.groundHit) {
      float t_hit = intersection.endT;
      TexCoord4D ssCoord = mapSky4DCoord(r, mu, mu_l, nu,
        _atmosphereRadius, _planetRadius, t_hit, false, _resSS.x, _resSS.y,
        _resSS.z, _resSS.w);
      float dot_L_d = dot(L, d);
      for (int j = 0; j < _numActiveLayers; j++) {
        /* Compute single scattering contribution using phase function. */
        float3 ss = t_hit * sampleSSTexture(ssCoord, j);
        float phase = computePhase(dot_L_d, _layerAnisotropy[j], _layerPhaseFunction[j]);
        gi[j] += ss * phase;
      }
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _GI_RW[float3(id.xy, i)] = gi[i] * 2 * PI / float(_numGISamples);
  }
}

[numthreads(8,8,1)]
void MS(uint3 id : SV_DispatchThreadID) {
  /* Unmap the uv coordinates to get the light direction and sample point. */
  float u_r = (id.x + 0.5f) / float(_resMS.x);
  float u_mu_l = (id.y + 0.5f) / float(_resMS.y);

  float2 r_mu_l = unmapMSCoordinate(u_r, u_mu_l, _atmosphereRadius, _planetRadius);

  float r = r_mu_l.x;
  float mu_l = r_mu_l.y;

  float3 O = float3(0, r, 0);
  float3 O_normalized = float3(0, 1, 0);
  float3 L = float3(safeSqrt(1 - mu_l * mu_l), mu_l, 0);
  /* Precompute. */
  float3 proj_L = normalize(L - O_normalized * mu_l);

  /* Sample a bunch of directions, uniformly distributed on a sphere. */
  float3 secondOrder = float3(0, 0, 0);
  float3 transferFunction = float3(0, 0, 0);
  for (int i = 0; i < _numMSSamples; i++) {
    /* Get the sample direction. */
    float3 d = fibonacciSphere(i, _numMSSamples);

    /* Trace a ray to see what we hit. */
    SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
      _atmosphereRadius);

    float t_hit = intersection.endT;
    float3 hitPoint = O + t_hit * d;

    /* We have r and mu_l, but we need to compute mu and nu. */
    /* Mu is just the dot(O, d), aka just the y component of d. */
    float mu = d.y;

    /* Nu we can compute as we've done before: by projecting d and
     * L onto the plane defined by O and taking the dot product.
     * We precomputed the projection of L, so don't do that here. */
    float3 proj_d = normalize(d - O_normalized * dot(O_normalized, d));
    /* Take their dot product to get the cosine of the angle between them. */
    float nu = clampCosine(dot(proj_L, proj_d));

    /* Add ground albedo times the transmittance to the second order
     * reflections if we hit the ground. HACK: screws up aerial perspective,
     * commenting out. */
    if (intersection.groundHit) {
      float2 groundUV = mapSky2DCoord(r, mu, _atmosphereRadius,
        _planetRadius, t_hit, true, _resT.y);
      float3 groundTransmittance = exp(SAMPLE_TEXTURE2D_LOD(_T,
        s_linear_clamp_sampler, groundUV, 0).xyz);
      float3 groundAlbedo = 2 * _groundTint.xyz / PI;
      secondOrder += groundTransmittance * groundAlbedo
        * saturate(dot(L, normalize(hitPoint))); // THIS PRODUCES ARTIFACTS?
    }

    /* Sample the single scattering tables. */
    TexCoord4D ssCoord = mapSky4DCoord(r, mu, mu_l, nu,
      _atmosphereRadius, _planetRadius, t_hit, intersection.groundHit,
      _resSS.x, _resSS.y, _resSS.z, _resSS.w);
    for (int j = 0; j < _numActiveLayers; j++) {
      float3 ss = t_hit * sampleSSTexture(ssCoord, j);
      secondOrder += (_layerCoefficientsS[j].xyz * 2 * _layerTint[j].xyz * ss)
        / (4.0 * PI);
      float3 ssNoShadow = sampleSSNoShadowTexture(ssCoord, j);
      transferFunction += (_layerCoefficientsS[j].xyz * 2 * _layerTint[j].xyz * ssNoShadow);
    }
  }

  /* Multiply by the isotropic phase function 1/4pi and divide by the number
   * of samples we took. */
  secondOrder /= 4.0 * PI * float(_numMSSamples);
  transferFunction /= 4.0 * PI * float(_numMSSamples);
  transferFunction = 1.0 / (1.0 - transferFunction);

  _MS_RW[id.xy] = secondOrder * transferFunction;
}

[numthreads(8,32,1)]
void MSAcc(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle, a
   * height, and the sun zenith and azimuth angles. */
  /* Viewing angle. */
  float u_mu = (id.x + 0.5f) / float(_resMSAcc.y);

  float3 u_r_u_mu_l_u_nu = deepTexIndexToUV(id.y, _resMSAcc.x, _resMSAcc.z, _resMSAcc.w);
  /* Height. */
  float u_r = u_r_u_mu_l_u_nu.x;
  /* Sun zenith angle. */
  float u_mu_l = u_r_u_mu_l_u_nu.y;
  /* Sun azimuth angle. */
  float u_nu = u_r_u_mu_l_u_nu.z;

  float4 ssCoord = unmapSky4DCoord(u_r, u_mu, u_mu_l,
    u_nu, _atmosphereRadius, _planetRadius);

  float r = ssCoord.x;
  float mu = ssCoord.y;
  float mu_l = ssCoord.z;
  float nu = ssCoord.w;

  float3 O = float3(0, r, 0);
  float3 d = float3(safeSqrt(1 - mu * mu), mu, 0);
  float3 L = float3(nu*safeSqrt(1 - mu_l*mu_l), mu_l,
    safeSqrt(1 - nu * nu)*safeSqrt(1 - mu_l*mu_l));

  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  float3 endPoint = O + d * intersection.endT;
  float t_hit = intersection.endT;

  float3 multipleScattering[MAX_LAYERS];
  for (int j = 0; j < MAX_LAYERS; j++) {
    multipleScattering[j] = float3(0, 0, 0);
  }

  for (int i = 0; i < _numMSAccumulationSamples; i++) {
    float sampleT = 0.0;
    float ds = 0.0;
    if (_useImportanceSampling) {
      float2 t_ds = generateCubicSampleFromIndex(i, _numMSAccumulationSamples);
      sampleT = t_hit * t_ds.x;
      ds = t_ds.y;
    } else {
      /* Distribute linearly. */
      float2 t_ds = generateLinearSampleFromIndex(i, _numMSAccumulationSamples);
      sampleT = t_hit * t_ds.x;
      ds = t_ds.y;
    }

    float3 samplePoint = O + d * sampleT;

    float r_sample = length(samplePoint);
    float mu_l_sample = dot(normalize(samplePoint), L);
    float2 msUV = mapMSCoordinate(r_sample, mu_l_sample,
      _atmosphereRadius, _planetRadius);
    float3 msContrib = SAMPLE_TEXTURE2D_LOD(_MS, s_linear_clamp_sampler, msUV, 0).xyz;

    /* Compute the scaled density of the layer at the sample point. test */
    for (int j = 0; j < _numActiveLayers; j++) {
      float scaledDensity = ds * computeDensity(_layerDensityDistribution[j],
        samplePoint, _layerHeight[j], _layerThickness[j], _layerDensity[j],
        _layerUseDensityAttenuation[j], sampleT, _layerAttenuationBias[j],
        _layerAttenuationDistance[j]);
      multipleScattering[j] += msContrib * scaledDensity;
    }
  }

  for (int i = 0; i < _numActiveLayers; i++) {
    _MSAcc_RW[uint3(id.xy, (uint) i)] = multipleScattering[i];
  }
}
