#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel T main=T
#pragma kernel SS main=SS
#pragma kernel AP main=AP
#pragma kernel MS main=MS
#pragma kernel MSAcc main=MSAcc

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "../../common/shaders/ExpanseSkyCommon.hlsl"
#include "../../sky/ExpanseSkyMapping.hlsl"
#include "../../sky/ExpanseSky.hlsl"

/* RW Textures. */
/* Transmittance. */
RW_TEXTURE2D(float3, _T_RW);

/* Single scattering. */
RW_TEXTURE2D(float3, _SS_RW);

/* Aerial perspective. */
RW_TEXTURE3D(float3, _AP_RW);

/* Multiple scattering. */
RW_TEXTURE2D(float3, _MS_RW);

/* Multiple scattering accumulation. */
RW_TEXTURE2D(float3, _MSAcc_RW);

[numthreads(8,8,1)]
void T(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle and a
   * height. */
  float2 u_r_mu = (id.xy + 0.5f) / _resT.xy;
  float2 r_mu = unmapSky2DCoord(u_r_mu.x, u_r_mu.y, _atmosphereRadius,
    _planetRadius, _resT.y);
  float r = r_mu.x;
  float mu = r_mu.y;

  float3 O = float3(0, r, 0);
  float3 d = normalize(float3(safeSqrt(1 - mu * mu), mu, 0));

  /* Trace a ray to see what we hit. We can use traceSkyVolumeValid() since
   * our UV mapping guarantees that O will always be within the sky
   * volume. */
  SkyIntersectionData intersection = traceSkyVolumeValid(O, d, _planetRadius,
    _atmosphereRadius);

  /* Compute transmittance from optical depth. */
  _T_RW[id.xy] = computeTransmittance(O, d, intersection.endT);
}

[numthreads(8,8,1)]
void SS(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle and a
   * radial angle. */
  float2 u_mu_theta = (id.xy + 0.5f) / _resSS.xy;
  float3 O = GetCameraPositionPlanetSpace();
  float r = length(O);
  float2 mu_theta = unmapSkyRenderCoordinate(r, u_mu_theta.x, u_mu_theta.y,
    _atmosphereRadius, _planetRadius, _resSS.x, _resSS.y);
  float3 d = mu_theta_to_d(mu_theta.x, mu_theta.y, O);

  // HACK: Hack where we make sure we don't sample directly on the horizon
  // line fixes remaining tiny artifacts.
  float h = r - _planetRadius;
  float cosHorizon = -safeSqrt(h * (2 * _planetRadius + h)) / (_planetRadius + h);
  float step = 1.0/_resSS.x;
  d.y = (d.y > cosHorizon) ? clamp(d.y, cosHorizon + step, 1) : clamp(d.y, -1, cosHorizon - step);

  /* Trace a ray to see what we hit. */
  // TODO: case out above atmo
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  float t_hit = intersection.endT - intersection.startT;
  float3 startPoint = O + d * intersection.startT;

  /* Compute single scattering and store the shadowed result. */
  SSResult ss = computeSS(startPoint, d, t_hit, t_hit, intersection.groundHit, 1.0, false, _numSSSamples, _useImportanceSampling);
  _SS_RW[id.xy] = ss.shadows;
}

[numthreads(4,4,4)]
void AP(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to frustum coordinates. */
  float3 uvw = (id + 0.5) / _resAP.xyz;
  float4 xyz = unmapFrustumCoordinate(uvw);
  float3 d = xyz.xyz;
  float depth = xyz.w;
  float3 O = GetCameraPositionPlanetSpace();
  float r = length(O);

  // HACK: Hack where we make sure we don't sample directly on the horizon
  // line fixes remaining tiny artifacts.
  float h = r - _planetRadius;
  float cosHorizon = -safeSqrt(h * (2 * _planetRadius + h)) / (_planetRadius + h);
  float step = min(1.0/_resMSAcc.x, 1.0/_resSS.x);
  d.y = (d.y > cosHorizon) ? clamp(d.y, cosHorizon + step, 1) : clamp(d.y, -1, cosHorizon - step);

  /* Compute SS between origin and depth in direction d. */
  /* TODO: need to case out above atmo. a bit more complex here. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  depth = min(depth, intersection.endT);
  // TODO: make samples tweakable?
  SSResult ss = computeSS(O, d, depth, intersection.endT, intersection.groundHit,
    _aerialPerspectiveNightScatteringMultiplier, true, _numAPSamples, _aerialPerspectiveUseImportanceSampling);
  float3 ms = computeMS(O, d, depth, intersection.endT, intersection.groundHit,
    _aerialPerspectiveNightScatteringMultiplier, _numAPSamples, _aerialPerspectiveUseImportanceSampling);

  /* Compute the transmittance between the 2 points. */
  float2 oToSample = mapSky2DCoord(r, dot(normalize(O), d), _atmosphereRadius,
    _planetRadius, intersection.endT, intersection.groundHit, _resT.y);
  float3 T = sampleSkyTTextureRaw(oToSample);
  float3 depthSample = O + d * depth;
  float2 sampleOut = mapSky2DCoord(length(depthSample), dot(normalize(depthSample), d), _atmosphereRadius,
    _planetRadius, intersection.endT - depth, intersection.groundHit, _resT.y);
  T -= sampleSkyTTextureRaw(sampleOut);

  _AP_RW[id] = float4(ss.shadows + ms, dot(float3(1.0, 1.0, 1.0)/3.0, T));
}

[numthreads(8,8,1)]
void MS(uint3 id : SV_DispatchThreadID) {
  /* Unmap the uv coordinates to get the light direction and sample point. */
  float2 u_r_mu_l = (id.xy + 0.5f) / _resMS.xy;
  float2 r_mu_l = unmapMSCoordinate(u_r_mu_l.x, u_r_mu_l.y, _atmosphereRadius, _planetRadius);
  float r = r_mu_l.x;
  float mu_l = r_mu_l.y;
  float3 O = float3(0, r, 0);
  float3 O_normalized = float3(0, 1, 0);
  float3 L = float3(safeSqrt(1 - mu_l * mu_l), mu_l, 0);

  /* Sample a bunch of directions, uniformly distributed on a sphere. */
  float3 secondOrder = float3(0, 0, 0);
  float3 transferFunction = float3(0, 0, 0);
  for (int i = 0; i < _numMSSamples; i++) {
    /* Get the sample direction. */
    float3 d = fibonacciSphere(i, _numMSSamples);

    /* Trace a ray to see what we hit. */
    SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
      _atmosphereRadius);

    float t_hit = intersection.endT;
    float3 hitPoint = O + t_hit * d;

    /* Add ground albedo times the transmittance to the second order
     * reflections if we hit the ground. */
    if (intersection.groundHit) {
      float mu = d.y;
      float2 groundUV = mapSky2DCoord(r, mu, _atmosphereRadius,
        _planetRadius, t_hit, true, _resT.y);
      float3 groundTransmittance = sampleSkyTTexture(groundUV);
      float3 groundAlbedo = 2 * _groundTint.xyz / PI;
      secondOrder += groundTransmittance * groundAlbedo
        * saturate(dot(L, normalize(hitPoint)));
    }

    /* Compute single scattering. */
    SSResult ss = computeSSForMS(O, d, t_hit, t_hit, intersection.groundHit, L, _numMSAccumulationSamples, _useImportanceSampling);
    secondOrder += ss.shadows / (4 * PI);
    transferFunction += ss.noShadows;
  }

  /* Multiply by the isotropic phase function 1/4pi and divide by the number
   * of samples we took. */
  secondOrder /= 4.0 * PI * float(_numMSSamples);
  transferFunction /= 4.0 * PI * float(_numMSSamples);
  transferFunction = 1.0 / (1.0 - transferFunction);

  _MS_RW[id.xy] = secondOrder * transferFunction;
}

[numthreads(8,8,1)]
void MSAcc(uint3 id : SV_DispatchThreadID) {
  /* Get the uv for this id and unwrap it to a viewing angle and a
   * radial angle. */
  float2 u_mu_theta = (id.xy + 0.5f) / _resMSAcc.xy;
  float3 O = GetCameraPositionPlanetSpace();
  float r = length(O);
  float2 mu_theta = unmapSkyRenderCoordinate(r, u_mu_theta.x, u_mu_theta.y,
    _atmosphereRadius, _planetRadius, _resMSAcc.x, _resMSAcc.y);

  float3 d = mu_theta_to_d(mu_theta.x, mu_theta.y, O);

  // HACK: Hack where we make sure we don't sample directly on the horizon
  // line fixes remaining tiny artifacts.
  float h = r - _planetRadius;
  float cosHorizon = -safeSqrt(h * (2 * _planetRadius + h)) / (_planetRadius + h);
  float step = 1.0/_resMSAcc.x;
  d.y = (d.y > cosHorizon) ? clamp(d.y, cosHorizon + step, 1) : clamp(d.y, -1, cosHorizon - step);

  /* TODO: Need to case out above atmo. */
  /* Trace a ray to see what we hit. */
  SkyIntersectionData intersection = traceSkyVolume(O, d, _planetRadius,
    _atmosphereRadius);
  float t_hit = intersection.endT - intersection.startT;
  float3 startPoint = O + d * intersection.startT;

  // TODO: tweakable
  _MSAcc_RW[id.xy] = computeMS(O, d, t_hit, t_hit, intersection.groundHit, 1.0, _numMSAccumulationSamples, _useImportanceSampling);
}
