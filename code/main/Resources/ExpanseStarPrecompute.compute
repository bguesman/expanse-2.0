#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel STAR main=STAR
#pragma kernel NEBULAE main=NEBULAE

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "../../common/shaders/ExpanseNoise.hlsl"
#include "../../sky/ExpanseStarCommon.hlsl"

/* RW Textures. */
RW_TEXTURE2D_ARRAY(float4, _Star_RW);
RW_TEXTURE2D_ARRAY(float4, _Nebulae_RW);

[numthreads(8,8,1)]
void STAR(uint3 id : SV_DispatchThreadID) {
  /* Get the uv coordinate. */
  float2 uv = (id.xy + 0.5) / _resStar.xy;
  float3 uvw = float3(uv.x, uv.y, id.z);

  /* Transform it to a normalized direction vector. */
  float3 d = tex2DArrayCubemapUVToDirection(uvw);

  /* Convert the direction vector to a uv coordinate. */
  float3 textureCoordinate = (d + 1) / 2;

  /* Sample some noise. TODO: should distort with curl noise and make that
   * tweakable. TODO: allow weight-painted cubemap to control star density.
   * TODO: allow grid size to be specified for max control? */
  float bigCells = 512;
  float smallCells = 1024;
  NoiseResultAndCoordinate noiseBig = worley3D(textureCoordinate,
    float3(bigCells, bigCells, bigCells));
  NoiseResultAndCoordinate noiseSmall = worley3D(textureCoordinate,
    float3(smallCells, smallCells, smallCells));

  /* Cache our seed value for flickering, from the big cell. */
  float starSeed = random_3_1(noiseBig.coordinate);

  /*****************************************************/
  /******* Compute everything for the big stars. *******/
  /*****************************************************/
  /* Do we render this star? */
  float densityRandomBig = random_3_1_seeded(noiseBig.coordinate,
    _starDensitySeed.xyz);
  bool renderBig = densityRandomBig > (1 - _starDensity) ? true : false;
  float3 starBigColor = float3(0, 0, 0);
  if (renderBig) {
    /* Transform the worley noise to look more like stars. */
    float sizeRandom = random_3_1_seeded(noiseBig.coordinate, _starSizeSeed.xyz);
    /* HACK: zero values screw up our biasing and result in artifacts. */
    float3 stars = float3(0, 0, 0);
    if (sizeRandom != 0) {
      sizeRandom = saturate(bias0To1(saturate(sizeRandom), _starSizeBias, 500));
      float sizeMinExponent = 5 + pow(1 - _starSizeMax, 1) * 100;
      float sizeMaxExponent = 5 + pow(1 - _starSizeMin, 1) * 100;
      stars = pow(noiseBig.result, sizeMinExponent + (sizeMaxExponent - sizeMinExponent) * sizeRandom);
    }

    /* Random intensity multiplier based on seed. */
    float intensityRandom = 1-bias0To1(random_3_1_seeded(noiseBig.coordinate, _starIntensitySeed.xyz), _starIntensityBias, 100);
    float intensity = _starIntensityMin + (_starIntensityMax - _starIntensityMin) * intensityRandom;

    /* Blackbody color based on seed. TODO: tint. */
    float temperatureRandom = 1-bias0To1(random_3_1_seeded(noiseBig.coordinate, _starTemperatureSeed.xyz), _starTemperatureBias, 100);
    float randomTemperature = _starTemperatureMin + (_starTemperatureMax - _starTemperatureMin) * temperatureRandom;
    float3 blackBodyColor = blackbodyTempToColor(randomTemperature);

    starBigColor = intensity * blackBodyColor * stars;
  }

  /*******************************************************/
  /******* Compute everything for the small stars. *******/
  /*******************************************************/
  float3 starSmallColor = float3(0, 0, 0);
  if (_useHighDensityMode) {
    float densityRandomSmall = random_3_1_seeded(noiseSmall.coordinate,
      _starDensitySeed.xyz);
    /* Do we render this star? */
    bool renderSmall = densityRandomSmall > (1 - _starDensity) ? true : false;
    if (renderSmall) {
      /* Transform the worley noise to look more like stars. */
      float sizeRandom = random_3_1_seeded(noiseSmall.coordinate, _starSizeSeed.xyz);
      /* HACK: zero values screw up our biasing and result in artifacts. */
      float3 stars = float3(0, 0, 0);
      if (sizeRandom != 0) {
        sizeRandom = saturate(bias0To1(saturate(sizeRandom), _starSizeBias, 500));
        float sizeMinExponent = 5 + pow(1 - _starSizeMax, 1) * 100;
        float sizeMaxExponent = 5 + pow(1 - _starSizeMin, 1) * 100;
        stars = pow(noiseSmall.result, sizeMinExponent + (sizeMaxExponent - sizeMinExponent) * sizeRandom);
      }

      /* Random intensity multiplier based on seed. */
      float intensityRandom = 1-bias0To1(random_3_1_seeded(noiseSmall.coordinate, _starIntensitySeed.xyz), _starIntensityBias, 100);
      float intensity = _starIntensityMin + (_starIntensityMax - _starIntensityMin) * intensityRandom;

      /* Blackbody color based on seed. TODO: tint. */
      float temperatureRandom = 1-bias0To1(random_3_1_seeded(noiseSmall.coordinate, _starTemperatureSeed.xyz), _starTemperatureBias, 100);
      float randomTemperature = _starTemperatureMin + (_starTemperatureMax - _starTemperatureMin) * temperatureRandom;
      float3 blackBodyColor = blackbodyTempToColor(randomTemperature);

      starSmallColor = intensity * blackBodyColor * stars;
    }
  }

  _Star_RW[id] = float4(starBigColor + starSmallColor, starSeed);
}

[numthreads(8,8,1)]
void NEBULAE(uint3 id : SV_DispatchThreadID) {
  /* Get the uv coordinate. */
  float2 uv = (id.xy + 0.5) / _resNebulae.xy;
  float3 uvw = float3(uv.x, uv.y, id.z);

  /* Transform it to a normalized direction vector. */
  float3 d = tex2DArrayCubemapUVToDirection(uvw);

  /* Convert the direction vector to a uv coordinate. */
  float3 textureCoordinate = (d + 1) / 2;

  /* Our nebula model requires 7 layers of noise.
   *  1. A layered perlin noise to create a hazey haze.
   *  2. A layered worley noise to create a cloudy look.
   *  3. A layered voronoi noise raised to a power, to create the sort
   *  of strandey shapes often visible in nebulae.
   *  4. A layered voronoi noise that serves the same function, but is
   *  higher frequency to capture more intricate details.
   *  5. A curl noise to warp the strandey voronoi noises to give the
   *  appearance of fluid motion.
   *  6. A value noise used to remap the other noises for sky coverage.
   *  7. A layered perlin noise to modulate the nebula alpha value to give
   *  the impression of varying star transmittance. */

  /* TODO: twekable seeds. */

  /* 1. Layered perlin noise for hazey base. */
  float haze = saturate(perlin3DLayered(saturate(textureCoordinate),
    float3(_nebulaHazeScale, _nebulaHazeScale, _nebulaHazeScale), _nebulaHazeScaleFactor, _nebulaHazeDetailBalance,
    _nebulaHazeOctaves) + _nebulaHazeBias);

  /* 2. Layered worley noise for cloudy look. */
  float clouds = saturate(worley3DLayered(saturate(textureCoordinate),
  float3(_nebulaCloudScale, _nebulaCloudScale, _nebulaCloudScale), _nebulaCloudScaleFactor,
  _nebulaCloudDetailBalance, _nebulaCloudOctaves) + _nebulaCloudBias);

  /* 5. Curl noise to warp strands. Have to compute first to advect uv
   * coordinate. */
  float3 coarseCurl = curlNoise3D(saturate(textureCoordinate),
    float3(_nebulaCoarseStrandWarpScale, _nebulaCoarseStrandWarpScale, _nebulaCoarseStrandWarpScale));
  float3 fineCurl = curlNoise3D(saturate(textureCoordinate),
    float3(_nebulaFineStrandWarpScale, _nebulaFineStrandWarpScale, _nebulaFineStrandWarpScale));

  /* 3. Layered voronoi noise to create coarse strands. */
  float3 warpedCoarseStrandTextureCoordinate = (normalize(d - _nebulaCoarseStrandWarp * coarseCurl) + 1) / 2;
  float coarseStrands = saturate(voronoi3DLayered(saturate(warpedCoarseStrandTextureCoordinate),
    float3(_nebulaCoarseStrandScale, _nebulaCoarseStrandScale, _nebulaCoarseStrandScale),
    _nebulaCoarseStrandScaleFactor, _nebulaCoarseStrandDetailBalance, _nebulaCoarseStrandOctaves)
    + _nebulaCoarseStrandBias);

  /* 4. Layered voronoi noise to create fine strands. */
  float3 warpedFineStrandTextureCoordinate = (normalize(d - _nebulaFineStrandWarp * fineCurl) + 1) / 2;
  float fineStrands = saturate(voronoi3DLayered(saturate(warpedFineStrandTextureCoordinate),
    float3(_nebulaFineStrandScale, _nebulaFineStrandScale, _nebulaFineStrandScale), _nebulaFineStrandScaleFactor,
    _nebulaFineStrandDetailBalance, _nebulaFineStrandOctaves) + _nebulaFineStrandBias);


  /* 6. Value noise for coverage. */
  float coverage = saturate(value3D(saturate(textureCoordinate),
    float3(_nebulaCoverageScale, _nebulaCoverageScale, _nebulaCoverageScale)).result);

  /* 7. Layered perlin noise for transmittance. Scaled to be between specified
   * min and max values. TODO: add biasing option. */
  float transmittance = perlin3DLayered(saturate(textureCoordinate),
  float3(_nebulaTransmittanceScale, _nebulaTransmittanceScale, _nebulaTransmittanceScale),
    2, 0.5, 3);
  transmittance = _nebulaTransmittanceMin
    + (_nebulaTransmittanceMax - _nebulaTransmittanceMin) * transmittance;

  /* The model uses 4 colors---one for each component. TODO: 8 colors then sample gradient range? */

  /* Remap all the base noises using the coverage noise. */
  haze = saturate(remap(haze * _nebulaHazeStrength, pow(coverage, _nebulaHazeSpread) * _nebulaHazeCoverage, 1, 0, 1));
  clouds = saturate(remap(clouds * _nebulaCloudStrength, pow(coverage, _nebulaCloudSpread) * _nebulaCloudCoverage, 1, 0, 1));
  coarseStrands = saturate(remap(pow(coarseStrands, _nebulaCoarseStrandDefinition) * _nebulaCoarseStrandStrength, pow(coverage, _nebulaCoarseStrandSpread) * _nebulaCoarseStrandCoverage, 1, 0, 1));
  fineStrands = saturate(remap(pow(fineStrands, _nebulaFineStrandDefinition) * _nebulaFineStrandStrength, pow(coverage, _nebulaFineStrandSpread) * _nebulaFineStrandCoverage, 1, 0, 1));

  float3 finalColor = _nebulaHazeColor * haze + _nebulaCloudColor * clouds
    + _nebulaCoarseStrandColor * coarseStrands + _nebulaFineStrandColor * fineStrands;

  _Nebulae_RW[id] = float4(finalColor, transmittance);

  /*
   * TODO:
   * -4 parameters
   *  -base (perlin)
   *  -cloudiness (worley)
   *  -coarse stringiness (voronoi 1) better name?
   *  -detail stringiness (voronoi 2) better name?
   *  -warp (distortion via curl noise)
   *  -create nebula first and then add checkbox to modulate star density by
   *  nebula color magnitude (stars follow nebulae---maybe slider instead
   *  to give some control? make sure to only turn on for )
   */
}
