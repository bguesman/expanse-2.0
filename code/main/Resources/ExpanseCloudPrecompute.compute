#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

/* 2D noises. */
#pragma kernel VALUE2D main=VALUE2D
#pragma kernel PERLIN2D main=PERLIN2D
#pragma kernel VORONOI2D main=VORONOI2D
#pragma kernel WORLEY2D main=WORLEY2D

/* 3D noises. */
#pragma kernel VALUE3D main=VALUE3D

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "../../common/shaders/ExpanseNoise.hlsl"

/* RW Textures. */
RW_TEXTURE2D(float, Noise_2D);
RW_TEXTURE3D(float, Noise_3D);

float4 _resNoise;
float4 _gridScale;
int _octaves;
float _octaveScale;
float _octaveMultiplier;

// TODO: saturates probably unnecessary

[numthreads(8,8,1)]
void VALUE2D(uint3 id : SV_DispatchThreadID) {
  float2 uv = (id.xy + 0.5) / _resNoise.xy;
  float noise = value2DLayered(uv, max(float2(1, 1), _gridScale.xy),
    _octaveScale, _octaveMultiplier, _octaves);
  Noise_2D[id.xy] = saturate(noise);
}

[numthreads(8,8,1)]
void PERLIN2D(uint3 id : SV_DispatchThreadID) {
  float2 uv = (id.xy + 0.5) / _resNoise.xy;
  float noise = perlin2DLayered(uv, max(float2(1, 1), _gridScale.xy),
    _octaveScale, _octaveMultiplier, _octaves);
  Noise_2D[id.xy] = saturate(noise);
}

[numthreads(8,8,1)]
void VORONOI2D(uint3 id : SV_DispatchThreadID) {
  float2 uv = (id.xy + 0.5) / _resNoise.xy;
  float noise = voronoi2DLayered(uv, max(float2(1, 1), _gridScale.xy),
    _octaveScale, _octaveMultiplier, _octaves);
  Noise_2D[id.xy] = saturate(noise);
}

[numthreads(8,8,1)]
void WORLEY2D(uint3 id : SV_DispatchThreadID) {
  float2 uv = (id.xy + 0.5) / _resNoise.xy;
  float noise = worley2DLayered(uv, max(float2(1, 1), _gridScale.xy),
    _octaveScale, _octaveMultiplier, _octaves);
  Noise_2D[id.xy] = saturate(noise);
}

[numthreads(8,8,8)]
void VALUE3D(uint3 id : SV_DispatchThreadID) {
  Noise_3D[id] = 1;
}
