///////////////
SKY
///////////////

TODO LIST:
  -done!
  -overall ambient multiplier for cubemap

KNOWN BUGS:
  -big stars that aren't affected by the size params
    -UPDATE: this is just a function of how the intensity feature works.
    This should be documented in whatever guide we have for the star
    feature.

  -weird fog ap flicker bug? perhaps when sun is just right on horizon? can't
  seem to repro... bad state maybe?
    -it's most visible as tiny flecks when we compute ap in realtime
    -it has to do with the transmittance table, because it's not visible when
    we compute transmittance without the table
    -hacked around by using max() call---see the code for details.

  -top of sky circle bug if we feel like it

  -AP rippling bug

  -AP heavy fog attenuation artifacts
    -more on this: for some reason if you make the fog super super dense
    for an analytical layer, and then dive down into it, you can sometimes
    see this huge circle artifact around the zenith of the sky.

  -Perlin noise grid size < 3 bug

  -super tiny seam in theta coordinate?


FUTURE FEATURE LIST:
  -clouds
  -volumetric shadowing for one body via directional light's cascaded shadow
  map
  -nebula color gradients. is there a gradient ui parameter?
  -lighting based on visible celestial body fraction
  -if anybody asks for it, enable/disable aerial perspective switch.
  -analytical integration for exponential and tent layers via polynomial
  approximation for realtime transmittance
  -analytical integration for attenuation bias
  -shadowing and eclipses for celestial bodies
    -in this vein, perhaps an acceleration structure on top? or maybe
    it's not slow enough to matter
    -maybe abstract out body occlusion queries to a function







///////////////
CLOUDS
///////////////

TODO LIST:
  -checkbox for bodies for if they affect clouds so that we can add bodies
  without them having to light the clouds and slow things down

  -possibly render cloud layers to a texture array, so that we don't need
  to use the slow split out sampling code. Or, just allocate a separate
  texture array and copy the regular fullscreen textures into that for
  compositing.

  -maybe just don't allow grid size in y direction to change. make it a
  function of geometry of box volume and x and z grid sizes.

  -2D
    -some kind of self shadowing hack based on density and derivative of
    low mipped texture in each direction?
    -noise generation. for each layer, 6 noises, generated or texture.
      -coverage
      -base
      -structure (remap low freq)
      -detail (remap high freq)
      -big warp (low frequency warping)
      -detail warp (high frequency warping of detail texture)
    -movement
      -uv offsets for each texture
      -warping?
    -lighting
      -phase function from nubis
    -sampling
      -

Parameters:
