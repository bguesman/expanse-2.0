todo list:
 -nebulae no texture assigned issue
 -conditional MSAA
 -lighting based on visible sun fraction (debatable if this matters). seems
 important for getting rid of edge in sky during sunsets. can have a
 visibility factor function that replaces shadowing.
 -make night sky texture average evaluation more efficient
 -clean up remaining warnings
 -UI title size hierarchy
 -reverse importance sample if looking at ground?

 -maybe investigate the top of sky circle bug if we feel like it
 -also maybe investigate AP rippling bug if we feel like it

 -possibly split out atmo types into different arrays for perf? I don't know
 if this will help much but it may allow us to avoid branching in the shader
 in the inner loop. should see how much faster it is without the branch
 first.
 -investigate bug where you're looking at the planet from space and half of it
 seems to be totally wrong. UPDATE: appears to be choice of K for local frame.
 This makes sense. Doesn't seem to affect results on the ground. May just want
 to use a different selection process to figure out what that vector should
 be. handedness flip perhaps?
  -maybe not. maybe the parameterization just fails for outside the atmo?
  I don't really know yet.
  -Well, the big one I was investigating here was fixed by normalizing
  the local frame. Thought 2 normalized vectors produced a normalized
  vector when you took their cross product, but I guess not!
  -There is still a bug when you go too high up though, actually outside
  the atmo.
  -It would appear it's all fixed now.

 -no celestial bodies in the rendered cubemap---should make things a lot more
 efficient. currently sitting at around 150us with quality medium. DONE: now
 sitting at 10us!
 -possibly optimize direct lighting rendering computation
    -always sample default textures to omit branching, but multiply result by
    hasTexture cast to float?
-bug where objects oustide atmo have a black line where they transition
from being composited on top of the atmo to on top of space

-constant star ambient addition to the map? Maybe the average sky color
that we compute for scattering? or maybe allow it to be more user specifiable,
like a "night ambient multiplier"

new params:

  -possibly on hold but probably useful: nebula color gradients. is there a gradient ui parameter?
